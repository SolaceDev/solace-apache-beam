# This workflow will build and test a Java project with Maven

name: build

on:
  pull_request:
  push:

jobs:
  build:
    name: Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        type: ['direct', 'dataflow']

    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Setup GCP SDK
        if: ${{ github.event_name != 'pull_request' ||  matrix.type == 'direct' }}
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Build and Run Tests
        if: ${{ github.event_name != 'pull_request' ||  matrix.type == 'direct' }}
        run: ci/run-tests.sh '${{ matrix.type }}' '-pl beam-sdks-java-io-solace -Dit.test=SolaceIOLifecycleDataflowIT'
        env:
          DATAFLOW_TEMP_ROOT: ${{ secrets.GCP_DATAFLOW_TEMP_ROOT }}
          SOLACE_HOST: ${{ secrets.SOLACE_HOST }}
          SOLACE_VPN_NAME: ${{ secrets.SOLACE_VPN_NAME }}
          SOLACE_USERNAME: ${{ secrets.SOLACE_USERNAME }}
          SOLACE_PASSWORD: ${{ secrets.SOLACE_PASSWORD }}
          SOLACE_MGMT_USERNAME: ${{ secrets.SOLACE_MGMT_USERNAME }}
          SOLACE_MGMT_PASSWORD: ${{ secrets.SOLACE_MGMT_PASSWORD }}

  sample:
    name: Samples Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        type: ['direct']

    steps:
      - uses: actions/checkout@v2
      - name: Setup JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Setup GCP SDK
        if: ${{ github.event_name != 'pull_request' ||  matrix.type == 'direct' }}
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true
      - name: Create Cleanup Script
        run: |
          mkdir -p "${CI_CLEANUP%/*}" && touch "$CI_CLEANUP" && chmod +x "$CI_CLEANUP"
          echo "CI_CLEANUP=$CI_CLEANUP" >> $GITHUB_ENV
        env:
          CI_CLEANUP: ${{ runner.temp }}/cleanup.sh
      - name: Build and Run Samples Tests
        if: ${{ github.event_name != 'pull_request' ||  matrix.type == 'direct' }}
        run: ci/run-samples-tests.sh '${{ matrix.type }}'
        env:
          DATAFLOW_TEMP_ROOT: ${{ secrets.GCP_DATAFLOW_TEMP_ROOT }}
          SOLACE_HOST: ${{ secrets.SOLACE_HOST }}
          SOLACE_VPN_NAME: ${{ secrets.SOLACE_VPN_NAME }}
          SOLACE_USERNAME: ${{ secrets.SOLACE_USERNAME }}
          SOLACE_PASSWORD: ${{ secrets.SOLACE_PASSWORD }}
          SOLACE_MGMT_USERNAME: ${{ secrets.SOLACE_MGMT_USERNAME }}
          SOLACE_MGMT_PASSWORD: ${{ secrets.SOLACE_MGMT_PASSWORD }}
      - name: Cleanup
        if: ${{ always() }}
        run: $CI_CLEANUP
